{"version":3,"sources":["components/Title.js","components/Form.js","components/Country.js","App.js","serviceWorker.js","index.js"],"names":["Title","className","Form","props","onSubmit","getCountry","type","name","placeholder","required","Country","population","region","capital","flag","src","alt","error","App","state","undefined","e","a","preventDefault","country","target","elements","value","fetch","then","data","json","status","setState","throwError","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"iQAYeA,G,MAVD,kBACd,yBAAKC,UAAU,SACX,mDCOWC,EATF,SAACC,GAAD,OAEb,0BAAMC,SAAUD,EAAME,YAErB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,iBAAiBC,UAAQ,IACpE,+CCoBcC,EAzBC,SAACP,GAAD,OACZ,yBAAKF,UAAU,gBAEPE,EAAMI,MAAQ,+BAAI,6CAAqB,8BAAOJ,EAAMI,OAGpDJ,EAAMQ,YAAc,+BAAI,0CAAJ,IAAuB,8BAAOR,EAAMQ,WAAb,YAG3CR,EAAMS,QAAU,+BAAI,uCAAe,8BAAOT,EAAMS,SAGhDT,EAAMU,SAAW,+BAAI,wCAAgB,8BAAOV,EAAMU,UAGlDV,EAAMW,MAAQ,+BAAK,8BAAM,yBAAKb,UAAU,WAAWc,IAAKZ,EAAMW,KAAME,IAAI,WAIxEb,EAAMc,OAAS,2BAAG,8BAAOd,EAAMc,UCqD5BC,E,4MAlEbC,MAAQ,CACNZ,UAAMa,EACNT,gBAAYS,EACZP,aAASO,EACTR,YAAQQ,EACRN,UAAMM,EACNH,WAAOG,G,EAGTf,W,uCAAa,WAAOgB,GAAP,eAAAC,EAAA,sDACXD,EAAEE,iBACIC,EAAUH,EAAEI,OAAOC,SAASnB,KAAKoB,MACvCC,MAAM,yCAAD,OAA0CJ,EAA1C,mBACFK,MACC,SAAAC,GACE,OAAOA,EAAKC,UAEfF,MAAK,SAACC,GACe,MAAhBA,EAAKE,OACP,EAAKC,SAAS,CACZ1B,KAAMuB,EAAK,GAAGvB,KACdI,WAAYmB,EAAK,GAAGnB,WACpBE,QAASiB,EAAK,GAAGjB,QACjBD,OAAQkB,EAAK,GAAGlB,OAChBE,KAAMgB,EAAK,GAAGhB,KACdG,MAAO,KAIT,EAAKiB,gBApBA,2C,wDAyBbA,WAAa,WACX,EAAKD,SAAS,CACZ1B,UAAMa,EACNT,gBAAYS,EACZP,aAASO,EACTR,YAAQQ,EACRN,UAAMM,EACNH,MAAM,+B,uDAKR,OACE,yBAAKhB,UAAU,eACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMI,WAAY8B,KAAK9B,aACvB,kBAAC,EAAD,CACEE,KAAM4B,KAAKhB,MAAMZ,KACjBI,WAAYwB,KAAKhB,MAAMR,WACvBE,QAASsB,KAAKhB,MAAMN,QACpBD,OAAQuB,KAAKhB,MAAMP,OACnBE,KAAMqB,KAAKhB,MAAML,KACjBG,MAAOkB,KAAKhB,MAAMF,c,GA1DZmB,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,a","file":"static/js/main.b34cdd85.chunk.js","sourcesContent":["import React from 'react';\n\nconst Title = ()=> (\n<div className=\"title\">\n    <h1>\n        Country Info App\n    </h1>\n   \n</div>\n);\n\n\nexport default Title;","import React from 'react';\n\nconst Form = (props) => (\n\n<form onSubmit={props.getCountry}>\n \n <input type=\"text\" name=\"name\" placeholder=\"Enter the name\" required/>\n <button>Get info!</button>\n</form>\n\n);\nexport default Form;\n","import React from 'react';\n\nconst Country = (props) => (\n    <div className=\"country-info\">\n        {\n            props.name && <p> <b>Country Name: </b><span>{props.name}</span></p>\n        }\n        {\n            props.population && <p> <b>Population:</b> <span>{props.population} people</span></p>\n        }\n        {\n            props.region && <p> <b>Region: </b><span>{props.region}</span></p>\n        }\n        {\n            props.capital && <p> <b>Capital: </b><span>{props.capital}</span></p>\n        }\n        {\n            props.flag && <p > <span><img className=\"flag-img\" src={props.flag} alt=\"Flag\"></img></span></p>\n        }\n\n        {\n            props.error && <p><span>{props.error}</span></p>\n        }\n \n    </div>\n);\n\nexport default Country;","import React from 'react';\nimport './App.css';\nimport Title from './components/Title';\nimport Form from './components/Form';\nimport Country from './components/Country';\n\n\nclass App extends React.Component {\n  state = {\n    name: undefined,\n    population: undefined,\n    capital: undefined,\n    region: undefined,\n    flag: undefined,\n    error: undefined,\n  }\n\n  getCountry = async (e) => {\n    e.preventDefault();\n    const country = e.target.elements.name.value;\n    fetch(`https://restcountries.eu/rest/v2/name/${country}?fullText=true`)\n      .then(\n        data => {\n          return data.json();\n        })\n      .then((data) => {\n        if (data.status !== 404) {\n          this.setState({\n            name: data[0].name,\n            population: data[0].population,\n            capital: data[0].capital,\n            region: data[0].region,\n            flag: data[0].flag,\n            error: \"\",\n          });\n        }\n        else {\n          this.throwError();\n        }\n      })\n  }\n\n  throwError = () => {\n    this.setState({\n      name: undefined,\n      population: undefined,\n      capital: undefined,\n      region: undefined,\n      flag: undefined,\n      error: `Not found! Try once more.`,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"country-app\">\n        <div className=\"container\">\n          <Title />\n          <Form getCountry={this.getCountry} />\n          <Country\n            name={this.state.name}\n            population={this.state.population}\n            capital={this.state.capital}\n            region={this.state.region}\n            flag={this.state.flag}\n            error={this.state.error}\n          />\n        </div>\n      </div>\n\n    );\n  }\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}